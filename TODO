Look into @font-face issues:

"IE’s CSS filters will jack up PNGs if you try to run them on content with PNGs in it. It’s not just the Alpha filter. It’s all of their filters. To make matters worse, It will jack up your @font-face fonts, too.

I recently did a client site with some tricky Ajax page loads (unontrusively, of course) where the content faded in and out. While the page cross fades, the font looks horrible (seemed to remove anti-aliasing while it was not 100% opaque), and sometimes things like the bar in “A” would disappear, leaving an upside-down “V”, after the fade back in.

Microsoft needs to research how Webkit and Gecko are doing these things (opacity, etc) and learn a good way to implement them in IE9. Filters get the job done and were arguably ahead of their time (we’re just not getting the CSS transitions MS was working on for years); however, the implementation is kludgy to code and makes things ugly if you are trying to be at all innovative. It’s by no means a good solution compared to what is available on other browsers.""

src: comment by Rober on http://mezzoblue.com/archives/2010/05/20/ie8_still_fa/



* Add unit tests (QUnit?) for the various edge cases to verify the plugin's performance at any time

* write a script to auto-generate a minified version of the JS file

* add a simpler set of demos that tests each feature individually

* Look into this issue brought up by Bradley Wright @ http://allinthehead.com/retro/338/supersleight-jquery-plugin

"One thing to be careful of: if you’re using an image element with padding or borders, this will fail, as the calculated width and height will include said borders and padding (so the image width and height will be increased).

A workaround is to use margins instead of padding."

* Look into input image support, as brought up by Francis Booth @ http://allinthehead.com/retro/338/supersleight-jquery-plugin

"Thanks for this Drew, we used this on a project last Friday and extended it to be <input type=“image” /> aware:

// image elements
if (settings.imgs && (self.is(‘img[src$=png]’) || self.is(‘input[src$=png][type=image]’))){

…I’m sure you could do something sweet with a preference too like has been done for img tags, something like: inputimgs: true"

* Handle background-repeat: repeat-y and repeat-x as brought up by Marc Hall @ http://allinthehead.com/retro/338/supersleight-jquery-plugin

I was wondering if you had fleshed out the background png handler? Whilst using the ss js at 24ways I found that if you had a background set background-repeat: repeat-y; it would enlarge the image to 100%.
I hacked this together to handle it: (supersleight.js)

var bg_fnFixPng = function(obj) {
var mode = ‘scale’;
var bg	= obj.currentStyle.backgroundImage;
var src = bg.substring(5,bg.length-2);
if (obj.currentStyle.backgroundRepeat == ‘no-repeat’) {
mode = ‘crop’;
}
if (obj.currentStyle.backgroundRepeat == ‘repeat-y’) {
obj.currentStyle.backgroundPosition = obj.currentStyle.backgroundPositionX;
mode = ‘crop’;
}
obj.style.filter = “progid:DXImageTransform.Microsoft.AlphaImageLoader(src=’” + src + “’, sizingMethod=’” + mode + “’)”;
obj.style.backgroundImage = ‘url(’shim‘)’;
};

Now, obviously, this only handles the one exception and there is the issue of having to enforce the postion of the image, yet, I think you get the picture. I’m thinking we need to rewrite this part to be more like an object class.


* Issue brought up by  house9 @ http://allinthehead.com/retro/338/supersleight-jquery-plugin on supporting .PNG that have Rails-style timestamps like ?129387128973

"Great plugin!

I had to change line #25 since I use the ruby on rails image helper which appends a timestamp to the image file name 
which renders as <img src=”/images/my_image.png?1241218462” alt=“my image” />

changed

if (settings.imgs && self.is(‘img[src$=png]’)){

to

if (settings.imgs && self.is(“img[src*=’.png?’]”)){"

* Issue brought up by Ole Marius @ http://allinthehead.com/retro/338/supersleight-jquery-plugin

"Ole Marius:
Seems like background-position is reset when using this. Would it be possible to get the css-position from the element, then re-applying it in some way?"


* Support sprite-sheets as brought up by Joke Buddha @ http://allinthehead.com/retro/338/supersleight-jquery-plugin

"Works great but unfortunatelly doesn’t help when background-position are used. We use one css sprite for all images…"